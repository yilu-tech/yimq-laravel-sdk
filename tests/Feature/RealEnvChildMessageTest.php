<?php


namespace Tests\Feature;


use Tests\App\Models\UserModel;
use Tests\TestCase;
use YiluTech\YiMQ\Constants\MessageStatus;
use YiluTech\YiMQ\Constants\ProcessStatus;
use YiluTech\YiMQ\Constants\SubtaskStatus;
use YiluTech\YiMQ\Constants\SubtaskType;
use YiluTech\YiMQ\Exceptions\YiMqHttpRequestException;
use YiluTech\YiMQ\Exceptions\YiMqSubtaskPrepareException;
use YiluTech\YiMQ\Models\Message as MessageModel;
use YiluTech\YiMQ\Models\ProcessModel;
use YiluTech\YiMQ\Models\Subtask as SubtaskModel;

class RealEnvChildMessageTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        UserModel::query()->delete();
    }


    public  function  testXaChildTransaction(){
        $data['username'] = "name-".$this->getUserId();

        $message = \YiMQ::transaction('user.create.xa.child-transaction')->begin();
        $xaSubtask = \YiMQ::xa('user@user.create.xa.child-transaction')->data($data)->prepare();
        \YiMQ::commit();
        $parent_subtask = 'user'.'@'.$xaSubtask->id;
        $childMessage = MessageModel::where(['parent_subtask'=>$parent_subtask])->first();
        $this->assertEquals($childMessage->status,MessageStatus::PENDING);
        //子事务的subtask 数据库还未提交，设置READ UNCOMMITTED来查询
        \DB::select("SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED");
        $childMessageEcSubtask = SubtaskModel::where(['message_id'=>$childMessage->message_id])->where(['type'=>SubtaskType::EC])->first();
        $this->assertEquals($childMessageEcSubtask->status,SubtaskStatus::PREPARED);
        \DB::select("SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ");


        sleep(1);
        $this->assertDatabaseHas($this->processModelTable,['id'=>$childMessageEcSubtask->subtask_id,'status'=>ProcessStatus::DONE]);
        $this->assertDatabaseHas($this->userModelTable,['username'=> $data['username'].'.update' ]);
    }

    /**
     * XA嵌套事务被动回滚
     */
    public  function  testXaChildTransactionPassivityRollback(){
        $data['username'] = "name-".$this->getUserId();
        $data['failed'] = true;

        $message = \YiMQ::transaction('user.create.xa.child-transaction')->delay(1000)->begin();
        $xaSubtask = null;
        try{
            $xaSubtask = \YiMQ::xa('user@user.create.xa.child-transaction')->data($data)->prepare();
        }catch (YiMqSubtaskPrepareException $e){
            $xaSubtask = $e->subtask;
            $this->assertEquals($e->getResult(),["message"=>"mock failed"]);
            $this->assertDatabaseHas($this->messageTable,['message_id'=>$message->id,'status'=>MessageStatus::PENDING]);//检查message
            $this->assertDatabaseHas($this->processModelTable,['id'=>$e->subtask->id,'status'=>ProcessStatus::PREPARING]);
            $parent_subtask = 'user'.'@'.$e->subtask->id;
            $this->assertDatabaseHas($this->messageTable,['parent_subtask'=> $parent_subtask,'status'=>MessageStatus::CANCELED]);//检查子message
        }
        \DB::reconnect();
        sleep(3);
        $this->assertDatabaseHas($this->messageTable,['message_id'=>$message->id,'status'=>MessageStatus::CANCELED]);
        $this->assertDatabaseHas($this->processModelTable,['id'=>$xaSubtask->id,'status'=>ProcessStatus::CANCELED]);
    }

    public  function  testXaChildTransactionRollback(){
        $data['username'] = "name-".$this->getUserId();
        $data['failed'] = true;

        $message = \YiMQ::transaction('user.create.xa.child-transaction')->delay(1000)->begin();
        $xaSubtask = null;
        try{
            $xaSubtask = \YiMQ::xa('user@user.create.xa.child-transaction')->data($data)->prepare();
        }catch (YiMqSubtaskPrepareException $e){
            $xaSubtask = $e->subtask;
            $this->assertEquals($e->getResult(),["message"=>"mock failed"]);
            $this->assertDatabaseHas($this->messageTable,['message_id'=>$message->id,'status'=>MessageStatus::PENDING]);//检查message
            $this->assertDatabaseHas($this->processModelTable,['id'=>$e->subtask->id,'status'=>ProcessStatus::PREPARING]);
            $parent_subtask = 'user'.'@'.$e->subtask->id;
            $this->assertDatabaseHas($this->messageTable,['parent_subtask'=>$parent_subtask,'status'=>MessageStatus::CANCELED]);//检查子message
            \YiMQ::rollback();
        }
        \DB::reconnect();
        $this->assertDatabaseHas($this->messageTable,['message_id'=>$message->id,'status'=>MessageStatus::CANCELED]);
        sleep(1);
        $this->assertDatabaseHas($this->processModelTable,['id'=>$xaSubtask->id,'status'=>ProcessStatus::CANCELED]);
    }

    public  function  testTccChildTransaction(){
        $data['username'] = "name-".$this->getUserId();

        $message = \YiMQ::transaction('user.tcc_create-child-transaction-test')->begin();
        $xaSubtask = \YiMQ::tcc('user@user.tcc_create-child-transaction')->data($data)->try();

        \YiMQ::commit();

        $parent_subtask = 'user'.'@'.$xaSubtask->id;
        $childMessage = MessageModel::where(['parent_subtask'=>$parent_subtask])->first();
        $this->assertEquals($childMessage->status,MessageStatus::PREPARED);

        $childMessageEcSubtask = SubtaskModel::where(['message_id'=>$childMessage->message_id])->where(['type'=>SubtaskType::EC])->first();
        $this->assertEquals($childMessageEcSubtask->status,SubtaskStatus::PREPARED);
        //协调器处理之前，数据库中应该还没有subtask的process
        $this->assertDatabaseMissing($this->processModelTable,['id'=>$childMessageEcSubtask->subtask_id]);

        //等待协调器处理
        sleep(1);

        $this->assertDatabaseHas($this->processModelTable,['id'=>$childMessageEcSubtask->subtask_id,'status'=>ProcessStatus::DONE]);//处理后，应该存在process
        $this->assertDatabaseHas($this->userModelTable,['username'=> $data['username'].'.update' ]);
    }

    /**
     * Tcc嵌套事务被动回滚
     */
    public  function  testTccChildTransactionPassivityRollback(){
        $data['username'] = "name-".$this->getUserId();
        $data['failed'] = true;

        $message = \YiMQ::transaction('user.create.xa.child-transaction')->delay(1000)->begin();
        $tccSubtask = null;
        try{
            $tccSubtask = \YiMQ::tcc('user@user.tcc_create-child-transaction')->data($data)->try();
        }catch (YiMqSubtaskPrepareException $e){
            $tccSubtask = $e->subtask;
            $this->assertEquals($e->getResult(),["message"=>"mock failed"]);
            $this->assertDatabaseHas($this->messageTable,['message_id'=>$message->id,'status'=>MessageStatus::PENDING]);//检查message
            $this->assertDatabaseHas($this->processModelTable,['id'=>$e->subtask->id,'status'=>ProcessStatus::PREPARING]);
            $parent_subtask = 'user'.'@'.$e->subtask->id;
            $this->assertDatabaseHas($this->messageTable,['parent_subtask'=> $parent_subtask,'status'=>MessageStatus::CANCELED]);//检查子message
        }
        \DB::reconnect();
        sleep(2);
        $this->assertDatabaseHas($this->messageTable,['message_id'=>$message->id,'status'=>MessageStatus::CANCELED]);
        $this->assertDatabaseHas($this->processModelTable,['id'=>$tccSubtask->id,'status'=>ProcessStatus::CANCELED]);
    }

    public  function  testTccChildTransactionRollback(){
        $data['username'] = "name-".$this->getUserId();
        $data['failed'] = true;

        $message = \YiMQ::transaction('user.create.xa.child-transaction')->delay(1000)->begin();
        $tccSubtask = null;
        try{
            $tccSubtask = \YiMQ::tcc('user@user.tcc_create-child-transaction')->data($data)->try();
        }catch (YiMqSubtaskPrepareException $e){
            $tccSubtask = $e->subtask;
            $this->assertEquals($e->getResult(),["message"=>"mock failed"]);
            $this->assertDatabaseHas($this->messageTable,['message_id'=>$message->id,'status'=>MessageStatus::PENDING]);//检查message
            $this->assertDatabaseHas($this->processModelTable,['id'=>$e->subtask->id,'status'=>ProcessStatus::PREPARING]);
            $parent_subtask = 'user'.'@'.$e->subtask->id;
            $this->assertDatabaseHas($this->messageTable,['parent_subtask'=>$parent_subtask,'status'=>MessageStatus::CANCELED]);//检查子message
            \YiMQ::rollback();
        }
        \DB::reconnect();
        $this->assertDatabaseHas($this->messageTable,['message_id'=>$message->id,'status'=>MessageStatus::CANCELED]);
        sleep(1);
        $this->assertDatabaseHas($this->processModelTable,['id'=>$tccSubtask->id,'status'=>ProcessStatus::CANCELED]);
    }

    public function testEcChildTransaction(){
        $id = $this->getProcessId();
        $userModel = $this->createMockUser();
        $data = [
            'id'=>$userModel->id,
            'username'=>"test$id"
        ];

        $xaSubtask = \YiMQ::transaction('ec.child.transaction.test',function ()use($data){
            return \YiMQ::ec('user@user.update.ec.child-transaction')->data($data)->join();
        })->begin();

        $parent_subtask = 'user'.'@'.$xaSubtask->id;
        $childMessage = MessageModel::where(['parent_subtask'=>$parent_subtask])->first();
        $this->assertNull($childMessage);
        $this->sleepMs(800);

        $childMessage = MessageModel::where(['parent_subtask'=>$parent_subtask])->first();
        $this->assertEquals($childMessage->status,MessageStatus::DONE);

        $this->assertDatabaseHas($this->userModelTable,['id'=>$userModel->id,'username'=>$data['username']]);
    }

    /**
     * 因为测试时间太长这个测试的时候需要手动修改名字
     */
    public function stop_testEcChildRollbackCheckChildTransaction(){
//    public function testEcChildRollbackCheckChildTransaction(){
        $id = $this->getProcessId();
        $userModel = $this->createMockUser();
        $data = [
            'id'=>$userModel->id,
            'username'=>$userModel->username
        ];

        $xaSubtask = \YiMQ::transaction('ec.child.transaction.test',function ()use($data){
            return \YiMQ::ec('user@user.update.ec.child-transaction')->data($data)->join();
        })->begin();

        $parent_subtask = 'user'.'@'.$xaSubtask->id;

        $this->assertDatabaseMissing($this->messageTable,['parent_subtask'=>$parent_subtask]);

        sleep(1);
        $this->assertDatabaseHas($this->messageTable,['parent_subtask'=>$parent_subtask,'status'=>MessageStatus::CANCELED]);
        $this->assertDatabaseMissing($this->messageTable,['parent_subtask'=>$parent_subtask,'status'=>MessageStatus::DONE]);

        //把数据库占用的用户名让出来，让ec在5秒后重试
        $userModel->username = 'change-name'.$this->getProcessId();
        $userModel->save();

        sleep(6);
        $this->assertDatabaseHas($this->messageTable,['parent_subtask'=>$parent_subtask,'status'=>MessageStatus::CANCELED]);
        //重试后存在一条 已完成的子事务
        $this->assertDatabaseHas($this->messageTable,['parent_subtask'=>$parent_subtask,'status'=>MessageStatus::DONE]);
    }


}