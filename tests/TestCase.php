<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Tests\App\Models\UserModel;
use YiluTech\YiMQ\Models\Message as MessageModel;
use YiluTech\YiMQ\Models\ProcessModel;
use YiluTech\YiMQ\Models\Subtask as SutaskModel;
abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;
    public $messageTable;
    public $subtaskTable;
    public $userModelTable;
    public $processModelTable;
    public function __construct($name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        $this->messageTable = (new MessageModel())->getTable();
        $this->subtaskTable = (new SutaskModel())->getTable();
        $this->userModelTable = (new UserModel())->getTable();
        $this->processModelTable = (new ProcessModel())->getTable();
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        \DB::connection()->reconnect();
        UserModel::truncate();
        MessageModel::truncate();
        SutaskModel::truncate();
        ProcessModel::truncate();
    }

    public function getMessageId(){
        $first = MessageModel::query()->orderByDesc('id')->first();
        $index = $first ?  ++ $first->id : 100;
        return $index;
    }
    public function getSubtaskId(){
        $first = SutaskModel::query()->orderByDesc('id')->first();
        $index = $first ?  ++ $first->id : 100;
        return $index;
    }
    public function getProcessId(){
        $first = ProcessModel::query()->orderByDesc('id')->first();
        $index = $first ?  ++ $first->id : 100;
        return $index;
    }

    public function getUserId(){
        \DB::getPdo()->exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED');
        $first = UserModel::query()->orderByDesc('id')->first();
        \DB::getPdo()->exec('SET TRANSACTION ISOLATION LEVEL REPEATABLE READ');
        $index = $first ?  ++ $first->id : 1;
        return $index;
    }

    public function createMockUser(){
        $userModel = new UserModel();
        $userModel->username = "name-".$this->getUserId();
        $userModel->save();
        return $userModel;
    }
}
